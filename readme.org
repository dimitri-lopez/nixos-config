#+title: Readme

- [[*Hyprland config][Hyprland config]]
- [[elisp:(vterm-nixos-config)][Launch terminal for config]]
-----
- [[elisp:(org-babel-tangle)][Tangle file]]
- [[elisp:(dl/nixos-update-all-config)][Update all config]]
- [[elisp:(dl/nixos-update-user-config)][Update home config]]
- [[elisp:(dl/nixos-update-system-config)][Update system config]]
-------
- [[elisp:(dl/nixos-try-package)][Try package]]
- [[*System Packages][configuration.nix packages]]
- [[*home.nix packages inbox][home.nix packages]]
- [[id:93410304-5af5-429b-ab09-18892f0950bc][Nix tasks]]
-----
- [[*Try out python package][Install python package]]
* TODO List
** DONE gvfs throwing error messages
I added it to emacs.nix to see if that would fix it. On the next reboot, I should be able to see if it is working

** DONE Custom wallpaper
Looks like I want to use stylix. I think that would be my best option. I will steal from here:
[[file:~/example-nixos-configs/libre-pheonix-nixos-config/user/style/stylix.nix]]

This looks wayyyy too complicated for what I want to do right now. I will try and dig into it another day. Let me just user hyprpaper at the moment.
** DONE Pretty lock screen
** TODO Waybar
** TODO Alt-tab window selection?
** TODO stylix
** TODO mu4e
:LOGBOOK:
CLOCK: [2025-07-26 Sat 19:23]
:END:
* Resources
** Single command run
#+begin_src emacs-lisp
(defun dl/nixos-tangle-update-home-config ()
  (interactive)
  (save-excursion
    (find-file "~/.dotfiles/readme.org")
    (org-babel-tangle)
    (dl/nixos-update-user-config)))
(map!
 :leader
 :prefix "d"
 :desc "Tangle and update home config"
 "c" #'dl/nixos-tangle-update-home-config)

#+end_src

#+RESULTS:
: dl/nixos-tangle-update-home-config
** Garbage collection from cli
I have this done automatically within my configuration. See
[[Garbage collection]]

Garbage college generations older than 10 days.
#+begin_src bash
nix-collect-garbage -d --delete-older-than 10d
#+end_src

#+RESULTS:
| 1984 store paths deleted | 1772.57 MiB freed |
** Updating
*** Updating home config
#+begin_src bash
home-manager switch --flake .
#+end_src
*** Updating system config
#+begin_src bash
sudo nixos-rebuild switch --flake .
#+end_src
Packages can also be updated using the ==--upgrade== flag.

#+begin_src bash
sudo nixos-rebuild switch --flake . --upgrade
#+end_src

*** Updating home config and system config
#+begin_src bash
home-manager switch --flake . && sudo nixos-rebuild switch --flake .
#+end_src
** Workflow for testing out new packages
Use nix-shell where possible.

For example:
#+begin_src bash
nix-shell -p python3Packages.requests
#+end_src

This will drop you into a shell with the package available. You can then test it out and see if it works as expected. If it does, you can add it to your configuration.nix or home.nix file.
*** Testing out python packages
#+begin_src bash
nix-shell -p python3Packages.scikit-learn
python -c "import sklearn; print(sklearn.__version__)"
#+end_src

#+RESULTS:

** Changing permissions for configuration.nix
#+begin_src bash
sudo chown root configuration.nix
sudo chown root hardware-configuration.nix
#+end_src
** Switching flakes on the nix level
#+begin_src bash
sudo nixos-rebuild switch --flake .
#+end_src
** "File doesn't exist errors"
Try adding it to the repo and trying again
** Conflicting packages
#+begin_src bash
nix-env -q
#+end_src
** Cleaning up broken packages
#+begin_src emacs-lisp

(defalias 'dl/nixos-remove-package
   (kmacro "y y SPC w l i n i x - e n v SPC - e SPC <escape> p a <backspace> ; SPC h o m e - m a n a g e r SPC s w i t c h SPC - - f l a k e  SPC . <escape> <return>"))
#+end_src

#+RESULTS:
: dl/nixos-remove-package
** Github
#+begin_src bash
git config --global user.email "dimitrilopez01@gmail.com"
git config --global user.name "Dimitri Lopez"
#+end_src

#+RESULTS:


* Organization
I am going to keep this fairly basic and then organize it a little more over time. This is all powered through emacs org-mode. Running:
#+begin_src emacs-lisp
(org-babel-tangle)
#+end_src

Will tangle this file into the files that I actually care about. I keep it within org-mode so that I can leverage the better organization and jumping tools.

There are three main sources of files that I am concerned about:
- configuration.nix: System configuration
- flake.nix: Flake configuration, this rarely changes
- home.nix: Home configuration, this changes all the time

Within configuration.nix and home.nix I have a set of modules that I can add and subtract as need be. Each of the modules is usually some modular piece of code that I would like to build my system. As this configuration matures, I am sure that things will change quite a bit over time.

* flake.nix
:PROPERTIES:
:header-args:nix: :noweb-ref flake.nix
:END:
** Flake.nix main
#+begin_src nix :tangle flake.nix :noweb-ref flake.nix-setup :noweb yes
{
  description = "dimitril's flake";
  <<flake.nix--inputs>>
  outputs = inputs@{ self, nixpkgs, home-manager, ... }:
    let
      system = "x86_64-linux";
      lib = nixpkgs.lib;
      pkgs = nixpkgs.legacyPackages.${system};
      <<userSettings>>
      <<systemSettings>>
    in {
      nixosConfigurations = {
        nixos = lib.nixosSystem {
          inherit system;
          modules = [ ./configuration.nix ];
        };
      };
      homeConfigurations = {
        "dimitril" = home-manager.lib.homeManagerConfiguration {
          inherit pkgs;
          modules = [ ./home.nix ];
          extraSpecialArgs = {
            inherit userSettings;
            inherit inputs;
          };
        };
      };
    };
}
#+end_src

** Flake inputs
#+begin_src nix :noweb-ref flake.nix--inputs
inputs = {
  nixpkgs.url = "nixpkgs/nixos-25.05";
  home-manager.url = "github:nix-community/home-manager/release-25.05";
  home-manager.inputs.nixpkgs.follows = "nixpkgs";

  hyprland = {
    url = "github:hyprwm/Hyprland";
    inputs.nixpkgs.follows = "nixpkgs";
    inputs.home-manager.follows = "home-manager";
  };
  hyprland-plugins = {
    url = "github:hyprwm/Hyprland-Plugins";
    inputs.hyprland.follows = "hyprland";
  };
  raise.url = "github:knarkzel/raise";
};
#+end_src
** Flake userSettings
#+begin_src nix :noweb-ref userSettings
userSettings = {
  username = "dimitril";
  name = "Dimitri";
  email = "dimitrilopez01@gmail.com";
  dotfilesDir = "~/.dotfiles"; # absolute path of the local repo
  # wm = "hyprland"; # Selected window manager or desktop environment; must select one in both ./user/wm/ and ./system/wm/
  # editor = "emacsclient -c -a 'emacs'"
};
#+end_src
** Flake systemSettings
#+begin_src nix :noweb-ref systemSettings
systemSettings = {
  system = "x86_64-linux"; # system arch
  hostname = "dimitril-hostname";   # hostname
};
#+end_src
* configuration.nix
:PROPERTIES:
:header-args:nix: :noweb-ref configuration.nix
:END:
Help is available in the configuration.nix(5) man page and in the NixOS manual (accessible by running ‘nixos-help’).

#+begin_src nix :noweb yes :tangle configuration.nix :noweb-ref configuration.nix-setup
{ config, pkgs, ... }:

{
  <<configuration.nix-imports>>
  <<configuration.nix>>
}
#+end_src

** configuration.nix imports
See [[*configuration.nix modules][configuration.nix modules]]
** Bootloader
#+begin_src nix
# Bootloader.
boot.loader.systemd-boot.enable = true;
boot.loader.efi.canTouchEfiVariables = true;

networking.hostName = "nixos"; # Define your hostname.
networking.networkmanager.enable = true; # Enable networking
# networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

# Configure network proxy if necessary
# networking.proxy.default = "http://user:password@proxy:port/";
# networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
#+end_src

** USB
#+begin_src nix
services.devmon.enable = true;
services.gvfs.enable = true; # needed for emacs tramp
services.udisks2.enable = true;
#+end_src

** Sound
#+begin_src nix
# Enable sound with pipewire.
# services.pulseaudio.enable = false;
# TODO moved to ./system/pipewire.nix
# security.rtkit.enable = true;
# services.pipewire = {
#   enable = true;
#   alsa.enable = true;
#   alsa.support32Bit = true;
#   pulse.enable = true;
#   # If you want to use JACK applications, uncomment this
#   #jack.enable = true;

#   # use the example session manager (no others are packaged yet so this is enabled by default,
#   # no need to redefine it in your config for now)
#   #media-session.enable = true;
# };
#+end_src
** Fonts
#+begin_src nix
# fonts.packages = with pkgs; [
#   nerd-fonts.fira-code
#   nerd-fonts.droid-sans-mono
#   nerd-fonts.jetbrains-mono
# ];
#+end_src
** Time Zone
#+begin_src nix
# Set your time zone.
time.timeZone = "America/New_York";

#+end_src
** File Encoding
#+begin_src nix
# Select internationalisation properties.
i18n.defaultLocale = "en_US.UTF-8";

i18n.extraLocaleSettings = {
  LC_ADDRESS = "en_US.UTF-8";
  LC_IDENTIFICATION = "en_US.UTF-8";
  LC_MEASUREMENT = "en_US.UTF-8";
  LC_MONETARY = "en_US.UTF-8";
  LC_NAME = "en_US.UTF-8";
  LC_NUMERIC = "en_US.UTF-8";
  LC_PAPER = "en_US.UTF-8";
  LC_TELEPHONE = "en_US.UTF-8";
  LC_TIME = "en_US.UTF-8";
};

#+end_src
** DISABLED X11 windowing system
#+begin_src nix
# Enable the X11 windowing system.
# services.xserver = {
#   enable = true;
#   desktopManager = {
#     xfce = {
#       enable = true;
#     };
#   };
# };
# services.displayManager.defaultSession = "xfce";

# # Enable the XFCE Desktop Environment.
# services.xserver.displayManager.lightdm.enable = true;
# services.xserver.desktopManager.xfce.enable = true;

#+end_src
** X11 Keymap
#+begin_src nix
# Configure keymap in X11
# services.xserver.xkb = {
#   layout = "us";
#   variant = "";
# };

#+end_src
** CUPS printing
#+begin_src nix
# Enable CUPS to print documents.
services.printing.enable = true;
#+end_src
** User Account
#+begin_src nix
# Define a user account. Don't forget to set a password with ‘passwd’.
users.users.dimitril = {
  isNormalUser = true;
  description = "Dimitri Lopez";
  extraGroups = [ "networkmanager" "wheel" "storage" "input" "dialout" "video" "render" ];
  packages = with pkgs; [
  #  thunderbird
  ];
};
#+end_src

** System Packages
#+begin_src nix
# Install firefox.
programs.firefox.enable = true;

# Allow unfree packages
nixpkgs.config.allowUnfree = true;

# List packages installed in system profile. To search, run:
# $ nix search wget
environment.systemPackages = with pkgs; [

];
#+end_src
** Automatic updating
#+begin_src nix
system.autoUpgrade.enable = true;
system.autoUpgrade.dates = "weekly";
#+end_src

** Garbage collection
#+begin_src nix
nix.gc.automatic = true;
nix.gc.dates = "weekly";
nix.gc.options = "--delete-older-than 14d";
nix.settings.auto-optimise-store = true;
#+end_src
** Additional config
#+begin_src nix
# Enable touchpad support (enabled default in most desktopManager).
# services.xserver.libinput.enable = true;

# Some programs need SUID wrappers, can be configured further or are
# started in user sessions.
# programs.mtr.enable = true;
# programs.gnupg.agent = {
#   enable = true;
#   enableSSHSupport = true;
# };

# List services that you want to enable:

# Enable the OpenSSH daemon.
# services.openssh.enable = true;

# Open ports in the firewall.
# networking.firewall.allowedTCPPorts = [ ... ];
# networking.firewall.allowedUDPPorts = [ ... ];
# Or disable the firewall altogether.
# networking.firewall.enable = false;

# This value determines the NixOS release from which the default
# settings for stateful data, like file locations and database versions
# on your system were taken. It‘s perfectly fine and recommended to leave
# this value at the release version of the first install of this system.
# Before changing this value read the documentation for this option
# (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
system.stateVersion = "25.05"; # Did you read the comment?
nix.settings.experimental-features = [ "nix-command" "flakes" ];
#+end_src
* home.nix
:PROPERTIES:
:header-args:nix: :noweb-ref home.nix
:END:
** Setup
#+begin_src nix :noweb yes :tangle home.nix :noweb-ref home.nix-setup
{ config, pkgs, ... }:

{
<<home.nix.imports>>
<<home.nix>>
}
#+end_src
** home.nix Imports
See [[*home.nix modules][home.nix modules]].
** Default settings
#+begin_src nix
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = "dimitril";
  home.homeDirectory = "/home/dimitril";

  nixpkgs.config.allowUnfree = true;
  # sessionPath = ["/home/dimitril/.config/emacs"];

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "25.05"; # Please read the comment before changing.
#+end_src
** home.nix packages inbox
#+begin_src nix
  # The home.packages option allows you to install Nix packages into your
  # environment.
  home.packages = [
    # # Adds the 'hello' command to your environment. It prints a friendly
    # # "Hello, world!" when run.
    # pkgs.hello

    # # It is sometimes useful to fine-tune packages, for example, by applying
    # # overrides. You can do that directly here, just don't forget the
    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
    # # fonts?
    # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

    # # You can also create simple shell scripts directly inside your
    # # configuration. For example, this adds a command 'my-hello' to your
    # # environment:
    # (pkgs.writeShellScriptBin "my-hello" ''
    #   echo "Hello, ${config.home.username}!"
    # '')
  ];
#+end_src
** home.nix dotfiles
#+begin_src nix
  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };
#+end_src
** Environment variables

#+begin_src nix
  # Home Manager can also manage your environment variables through
  # 'home.sessionVariables'. These will be explicitly sourced when using a
  # shell provided by Home Manager. If you don't want to manage your shell
  # through Home Manager then you have to manually source 'hm-session-vars.sh'
  # located at either
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/dimitril/etc/profile.d/hm-session-vars.sh
  #
  home.sessionVariables = {
    # EDITOR = "emacs";
  };
#+end_src

** home-manager configuration
#+begin_src nix
  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
#+end_src
* Modules
** configuration.nix modules
[[*configuration.nix imports][configuration.nix imports]]
#+begin_src nix :noweb-ref configuration.nix-imports
imports =
  [ # Include the results of the hardware scan.
    ./hardware-configuration.nix
    # ./modules/xfce/xfce.nix
    ./system/hyprland.nix
    ./modules/steam.nix
    ./system/bluetooth.nix
    ./system/pipewire.nix
  ];
#+end_src
** home.nix modules
#+begin_src nix :noweb-ref home.nix.imports
  imports = [
    # ./modules/xfce/xfce-home.nix
    ./modules/wm/hyprland-minimal.nix
    # ./modules/hyprland/hyprland-home.nix
    ./modules/python.nix
    ./modules/sh.nix
    ./modules/scripting.nix
    ./modules/emacs.nix
    ./modules/brave.nix
    ./modules/minecraft.nix
    ./modules/watchy.nix
  ];
#+end_src
** brave.nix

#+begin_src nix :tangle ./modules/brave.nix
{ config, lib, pkgs, ... }:
# https://stackoverflow.com/questions/8946325/chrome-extension-id-how-to-find-it
{

  programs.chromium = {
    enable = true;
    package = pkgs.brave;

    # https://www.reddit.com/r/NixOS/comments/1bqilmi/how_to_configure_brave_browser_package_to_install/
    # Look at the url for the id either on the chrome web store or within the brave extensions page
    extensions = [
      # https://chromewebstore.google.com/detail/bitwarden-password-manage/nngceckbapebfimnlniiiahkandclblb
      { id = "nngceckbapebfimnlniiiahkandclblb"; }
      # https://chromewebstore.google.com/detail/grammarly-ai-writing-and/kbfnbcaeplbcioakkpcpgfkobkghlhen
      { id = "kbfnbcaeplbcioakkpcpgfkobkghlhen"; }
      # https://chromewebstore.google.com/detail/vimium-c-all-by-keyboard/hfjbmagddngcpeloejdejnfgbamkjaeg
      { id = "hfjbmagddngcpeloejdejnfgbamkjaeg";}
      # https://chromewebstore.google.com/detail/youtube-ad-accelerator-ea/lmcggcabhocpfkbddekmconplfjmmgmn
      { id = "lmcggcabhocpfkbddekmconplfjmmgmn";}
      # https://chromewebstore.google.com/detail/wallabagger/gbmgphmejlcoihgedabhgjdkcahacjlj?hl=en
      {id = "gbmgphmejlcoihgedabhgjdkcahacjlj";}
    ];
    commandLineArgs = [
      "--disable-features=WebRtcAllowInputVolumeAdjustment"
    ];
  };
  xdg.mimeApps.defaultApplications = {
  "text/html" = "brave-browser.desktop";
  "x-scheme-handler/http" = "brave-browser.desktop";
  "x-scheme-handler/https" = "brave-browser.desktop";
  "x-scheme-handler/about" = "brave-browser.desktop";
  "x-scheme-handler/unknown" = "brave-browser.desktop";
  };

  home.sessionVariables = {
    DEFAULT_BROWSER = "${pkgs.brave}/bin/brave";
  };
}
#+end_src
** emacs.nix

#+begin_src nix :tangle ./modules/emacs.nix
{ config, lib, pkgs, ... }:

{
  # services.gvfs.enable = true; # needed for emacs tramp
  home.packages = with pkgs; [
    emacs    # Emacs 27.2
    ripgrep
    # optional dependencies
    coreutils # basic GNU utilities
    fd
    clang

    cmake
    gnumake
    libtool

    graphviz # for org-roam

    texliveFull
    xorg.xwininfo # needed for emacs everywhere

    mu
    ((emacsPackagesFor emacs).emacsWithPackages (epkgs: [ epkgs.mu4e ]))
    isync
    offlineimap

    stdenv.cc.cc.lib
    nodejs # needed for github copilot
    (pkgs.writeScriptBin "restart-emacs-daemon" ''
#!/usr/bin/env bash

EMACSRUNNING="t"
EMACSSTATE=$(emacsclient -a false -e 't')
if [ "$EMACSRUNNING" = "$EMACSSTATE" ]; then
    # echo "Emacs daemon is running"
    notify-send 'Emacs Daemon' 'Restarting Emacs Daemon' -i ~/bin/BWEmacsIcon.png -t 3000
    emacsclient -e "(kill-emacs)"
else
    # echo "Emacs daemon is not running"
    notify-send 'Emacs Daemon' 'Starting up Emacs Daemon' -i ~/bin/BWEmacsIcon.png -t 3000
fi

emacs --daemon
notify-send 'Emacs Daemon' 'Daemon is now running' -i ~/bin/EmacsIcon.png -t 3000
    '')
    (pkgs.writeScriptBin "jumpapp-emacs" ''
#!/usr/bin/env bash

EMACSRUNNING="t"
EMACSSTATE=$(emacsclient -a false -e 't')
if [ "$EMACSRUNNING" != "$EMACSSTATE" ]; then
    # echo "Emacs daemon is not running"
    notify-send 'Emacs Daemon' 'Starting up Emacs Daemon' -i ~/bin/BWEmacsIcon.png -t 3000
    emacs --daemon
fi

VAR1=$(jumpapp -m emacs --daemon 2>&1 >/dev/null)
VAR2="Error: found running process for 'emacs', but found no window to jump to"
if [ "$VAR1" = "$VAR2" ]; then
    # emacs client is not open
    emacsclient -c -a 'emacs'
else
    python /home/dimitril/bin/move-windows-to-workspace.py
fi
    '')
  ];
}

#+end_src
** git.nix
#+begin_src nix :tangle ./modules/git.nix
{ config, pkgs, userSettings, ... }:

{
  home.packages = [
    pkgs.git
    pkgs.git-credential-manager
                  ];
  programs.git.enable = true;
  programs.git.userName = userSettings.name;
  programs.git.userEmail = userSettings.email;
  # programs.git.extraConfig = {
  #   init.defaultBranch = "main";
  #   safe.directory = [ ("/home/" + userSettings.username + "/.dotfiles")
  #                      ("/home/" + userSettings.username + "/.dotfiles/.git") ];
  # };
}
#+end_src
** python.nix
#+begin_src nix :tangle ./modules/python.nix
{ config, lib, pkgs, ... }:

{
  home.packages = with pkgs; [
    (python312.withPackages (python3Packages: with python3Packages; [
      jupyter

      numpy
      sympy
      pandas
      scipy
      matplotlib
      seaborn
      plotly
      networkx
      requests
      markdownify
      discordpy
    ]))
  ];
}
#+end_src
*** Try out python package
#+begin_src emacs-lisp
(dl/nixos-send-string-to-nixos-vterm "nix-shell -p python312Packages.scikit-learn")
(sleep-for 2)
(dl/nixos-send-string-to-nixos-vterm "python -c 'import sklearn;'")
#+end_src

#+RESULTS:

** scripting.nix
#+begin_src nix :tangle ./modules/scripting.nix
{ config, lib, pkgs, ... }:

{

  home.packages = with pkgs; [
    jumpapp
    libnotify # forr sending notifcations
    wmctrl #for window management
    (pkgs.writeScriptBin "simulate-keystrokes" ''
#!/bin/sh
notify-send 'Simulate Keystrokes' 'Will type out current clipboard contents' -i ~/bin/KeyboardIconW.png -t 3500
notify-send 'Simulate Keystrokes' 'Will type in: 3' -t 1000
sleep 1
notify-send 'Simulate Keystrokes' 'Will type in: 2' -t 1000
sleep 1
notify-send 'Simulate Keystrokes' 'Will type in: 1' -t 1000
sleep 1
xdotool type -- "$(xsel -bo | tr \\n \\r | sed s/\\r*\$//)"
'')

  ];
}
#+end_src

#+begin_src bash
#+end_src
** sh.nix
#+begin_src nix :tangle ./modules/sh.nix
{ config, lib, pkgs, userSettings, ... }:
let
  myAliases = {
    ll = "ls -la";
    ec = "emacsclient";
    myname = "echo " + userSettings.username;
  };
in
{
  programs.zsh = {
    enable = true;
    autosuggestion.enable = true;
    syntaxHighlighting.enable = true;
    enableCompletion = true;
    shellAliases = myAliases;
    initContent = ''
    PROMPT=" - %U%F{magenta}%n%f%u@%U%F{blue}%m%f%u:%F{yellow}%~%f
     %F{green}→%f "
    RPROMPT="%F{red}|%f%F{yellow}|%f%F{green}|%f%F{cyan}|%f%F{blue}|%f%F{magenta}|%f%F{white}|%f"
    [ $TERM = "dumb" ] && unsetopt zle && PS1='$ '
    bindkey '^P' history-beginning-search-backward
    bindkey '^N' history-beginning-search-forward
    '';
  };

  programs.bash = {
    enable = true;
    enableCompletion = true;
    shellAliases = myAliases;
  };

  home.packages = with pkgs; [
    # disfetch lolcat cowsay onefetch
    # gnugrep gnused
    # bat eza bottom fd bc
    # direnv nix-direnv
  ];

  programs.direnv.enable = true;
  programs.direnv.enableZshIntegration = true;
  programs.direnv.nix-direnv.enable = true;
}
#+end_src
** steam.nix
#+begin_src nix :tangle ./modules/steam.nix
{ config, lib, pkgs, ... }:

{
  # https://nixos.wiki/wiki/Steam
  programs.steam = {
    enable = true;
    remotePlay.openFirewall = true; # Open ports in the firewall for Steam Remote Play
    dedicatedServer.openFirewall = true; # Open ports in the firewall for Source Dedicated Server
    localNetworkGameTransfers.openFirewall = true; # Open ports in the firewall for Steam Local Network Game Transfers
  };
}
#+end_src
** xfce.nix
#+begin_src nix :tangle ./modules/xfce/xfce.nix
{ config, lib, pkgs, ... }:

# https://gist.github.com/nat-418/1101881371c9a7b419ba5f944a7118b0
{
  environment = {
    systemPackages = with pkgs; [
      redshift
      geoclue2
      dropbox
      blueman
      vim
      firefox
      font-manager
      # file-roller # broken
      gnome-disk-utility
      libreoffice
      orca
      pavucontrol # pulseaudio
      wmctrl
      xclip
      xcolor
      xcolor
      xdo
      xdotool
      xfce.catfish
      xfce.gigolo
      xfce.orage
      xfce.xfburn
      xfce.xfce4-appfinder
      xfce.xfce4-clipman-plugin
      xfce.xfce4-cpugraph-plugin
      xfce.xfce4-dict
      xfce.xfce4-fsguard-plugin
      xfce.xfce4-genmon-plugin
      xfce.xfce4-netload-plugin
      xfce.xfce4-panel
      xfce.xfce4-pulseaudio-plugin
      xfce.xfce4-systemload-plugin
      xfce.xfce4-weather-plugin
      xfce.xfce4-whiskermenu-plugin
      xfce.xfce4-xkb-plugin
      xfce.xfdashboard
      xorg.xev
      xorg.xkill
      xsel
      xwinmosaic
    ];
  };
  hardware = {
    bluetooth.enable = true;
  };

  programs = {
    dconf.enable = true;
    gnupg.agent = {
      enable = true;
      enableSSHSupport = true;
    };
    thunar = {
      enable = true;
      plugins = with pkgs.xfce; [
        thunar-archive-plugin
        thunar-media-tags-plugin
        thunar-volman
      ];
    };
  };

  # security.pam.services.gdm.enableGnomeKeyring = true;

  services = {
    blueman.enable = true;
    # gnome.gnome-keyring.enable = true;
    pipewire = { # multimedia framework
      enable = true;
      alsa = {
        enable = true;
        support32Bit = true;
      };
      pulse.enable = true;
    };
    xserver = {
      enable = true;
      excludePackages = with pkgs; [
        xterm
      ];
      displayManager = {
        lightdm = {
          enable = true;
          greeters.slick = {
            enable = true;
            theme.name = "Zukitre-dark";
          };
        };
      };
      desktopManager.xfce.enable = true;
    };
  };
}
#+end_src
** xfce-home.nix
:PROPERTIES:
:header-args:nix: :noweb-ref xfce-home
:END:
#+begin_src nix :noweb yes :noweb-ref xfce-home.nix-setup :tangle ./modules/xfce/xfce-home.nix
{ config, pkgs, lib, ... }:

{
<<xfce-home>>
}
#+end_src

*** Copy theme to appropriate directory
#+begin_src nix
  home.file."/home/dimitril/.themes/Everforest-Dark-Soft" = {
    source = ./themes/everforest-xfce-now-window-borders;
    recursive = true;
  };
#+end_src

*** GTK Configuration
#+begin_src nix
  gtk = {
    enable = true;
      iconTheme = {
      name = "elementary-Xfce-dark";
      package = pkgs.elementary-xfce-icon-theme;
    };
    theme = {
      name = "Everforest-Dark-Soft";
    #   name = "zukitre-dark";
    #   package = pkgs.zuki-themes;
    };
    gtk3.extraConfig = {
      Settings = ''
        gtk-application-prefer-dark-theme=1
      '';
    };
    gtk4.extraConfig = {
      Settings = ''
        gtk-application-prefer-dark-theme=1
      '';
    };
  };
#+end_src

*** XFConf Configuration
- [[file:~/.config/xfce4/desktop][Location on disk]]
**** Setup
#+begin_src nix
  xfconf = {
    enable = true;
    settings = {
#+end_src
**** Keyboard settings
#+begin_src nix
      keyboards = {
        "Default/KeyRepeat" = true;
        "Default/KeyRepeat/Delay" = 185;
        "Default/KeyRepeat/Rate" = 75;
      };
#+end_src
**** Panel settings
#+begin_src nix
      xfce4-panel = {
        "panels/" = [1];
        "panels/darkmode" = true;
        "panels/panel-1/autohide-behavior" = 2;
        "panels/panel-1/plugin-ids" = [11 2 3 4 5 6 7 8 9 10];
        "panels/panel-1/position" = "p=2;x=3420;y=720";
        "panels/panel-1/size" = 40;
        "panels/panel-1/length" = 100.0;
#+end_src
**** Plugin settings
#+begin_src nix
        "plugins/plugin2" = "tasklist";
        "plugins/plugin2/grouping" = 1;
        "plugins/plugin3" = "separator";
        "plugins/plugin3/expand" = true;
        "plugins/plugin3/style" = 0;
        "plugins/plugin4" = "pager";
        "plugins/plugin5" = "separator";
        "plugins/plugin5/style" = 0;
        "plugins/plugin6" = "systray";
        "plugins/plugin6/square-icons" = true;
        "plugins/plugin7" = "separator";
        "plugins/plugin7/style" = 0;
        "plugins/plugin8" = "clock";
        "plugins/plugin8/mode" = 2;
        "plugins/plugin9" = "separator";
        "plugins/plugin9/style" = 0;
        "plugins/plugin10" = "actions";
        "plugins/plugin11" = "whiskermenu";
      };
#+end_src
**** Keyboard shortcuts
***** Setup
#+begin_src nix
      xfce4-keyboard-shortcuts = {
        "commands/custom/override" = true;

#+end_src
***** Run scripts
#+begin_src nix
        # Scripts
        "commands/custom/<Super>Print" = "/home/dimitril/bin/simulate-keystrokes";
        "commands/custom/<Primary><Alt>c" = "xdotool mousemove 1750 60 click 1";
        "commands/custom/<Super>q" = "pkill -USR1 '^redshift$'";

#+end_src
***** Run Emacs scripts
#+begin_src nix
        # Emacs Scripts
        "commands/custom/<Super>Insert" = "emacsclient --eval \"(emacs-everywhere)\"";
        "commands/custom/<Super>i" = "emacsclient --eval \"(emacs-everywhere)\"";
        "commands/custom/<Super>BackSpace" = "/home/dimitril/.config/emacs/bin/org-capture";
        "commands/custom/<Alt>Favorites" = "/home/dimitril/.config/emacs/bin/org-capture";

#+end_src
***** Launch apps
#+begin_src nix
        # Launching apps
        "commands/custom/<Super>space" = "xfce4-popup-whiskermenu";
        "commands/custom/<Alt>0" = "/home/dimitril/bin/restart-emacs-daemon";
        "commands/custom/<Alt>e" = "/home/dimitril/bin/jumpapp-emacs";
        "commands/custom/<Super>Tab" = "jumpapp -m thunar";
        "commands/custom/<Super>b" = "jumpapp -m blueman-manager";
        "commands/custom/<Super>c" = "jumpapp -m brave";
        "commands/custom/<Super>e" = "/home/dimitril/bin/jumpapp-emacs";
        "commands/custom/<Super>t" = "jumpapp xfce4-terminal";
        "commands/custom/<Primary><Alt>Delete" = "xfce4-session-logout";
        "commands/custom/<Primary><Shift>Escape" = "xfce4-taskmanager";
        "commands/custom/<Super>minus" = "xkill";

#+end_src
***** Screenshot
#+begin_src nix
        # Screenshot
        "commands/custom/<Alt>Print" = "xfce4-screenshooter -w";
        "commands/custom/Print" = "xfce4-screenshooter";
        "commands/custom/<Shift>Print" = "xfce4-screenshooter -r";

#+end_src
***** XFWM4 Keybindings / Window Manager Keybindings
****** Select window options
#+begin_src nix
        # xfwm4/custom
        "xfwm4/custom/override" = true;

        "xfwm4/custom/<Alt>Tab" = "cycle_windows_key";
        "xfwm4/custom/<Shift><Alt>ISO_Left_Tab" = "cycle_reverse_windows_key";

        "xfwm4/custom/<Shift><Super>space" = "popup_menu_key"; # window menu options
        "xfwm4/custom/<Super>Delete" = "close_window_key";

#+end_src
****** Move windows
#+begin_src nix
        # Move windows
        "xfwm4/custom/<Alt><Super>1" = "move_window_workspace_1_key";
        "xfwm4/custom/<Alt><Super>2" = "move_window_workspace_2_key";
        "xfwm4/custom/<Super>bracketright" = "move_window_to_monitor_right_key";
        "xfwm4/custom/<Super>bracketleft" = "move_window_to_monitor_left_key";

#+end_src
****** Resize windows
#+begin_src nix
        # Resize windows
        "xfwm4/custom/<Alt>w" = "maximize_window_key";
        "xfwm4/custom/<Alt>m" = "move_window_key";
        "xfwm4/custom/<Alt>r" = "resize_window_key";
        "xfwm4/custom/<Alt>v" = "maximize_vert_key";
        "xfwm4/custom/<Super>f" = "fullscreen_key";

#+end_src
****** Tile windows
#+begin_src nix
        # Tile windows
        "xfwm4/custom/<Super>h" = "tile_left_key";
        "xfwm4/custom/<Super>l" = "tile_right_key";
        # "xfwm4/custom/<Shift><Super>h" = "tile_up_left_key";
        # "xfwm4/custom/<Shift><Super>j" = "tile_down_left_key";
        # "xfwm4/custom/<Shift><Super>k" = "tile_down_right_key";
        # "xfwm4/custom/<Shift><Super>Left" = "move_window_left_key";
        "xfwm4/custom/<Shift><Super>Right" = "move_window_right_key";
        "xfwm4/custom/<Shift><Super>Up" = "move_window_up_key";
        "xfwm4/custom/<Shift><Super>Down" = "move_window_down_key";
#+end_src
***** Teardown
#+begin_src nix
      };
#+end_src
**** XFWM4 Theme
#+begin_src nix
      xfwm4 = {
        "general/theme" = "Everforest-Dark-Soft";
      };
#+end_src
**** Teardown
#+begin_src nix
    };
  };
#+end_src

*** GPG Configuration

#+begin_src nix
  programs.gpg.enable = true;
  services.gpg-agent.enable = true;
#+end_src

** TODO watchy.nix

- [ ] [[*configuration.nix modules][configuration.nix modules]]
- [ ] [[*home.nix modules][home.nix modules]]
- [ ] [[elisp:(org-babel-tangle)]]
- [ ] [[git add -A ./modules/watchy]]
#+begin_src nix :tangle ./modules/watchy.nix
{ config, lib, pkgs, ... }:

{
  home.packages = with pkgs; [
    esptool
    platformio
    arduino
  ];
}
#+end_src
** minecraft.nix

- [ ] [[*configuration.nix modules][configuration.nix modules]]
- [ ] [[*home.nix modules][home.nix modules]]
- [ ] [[elisp:(org-babel-tangle)]]
- [ ] [[git add -A ./modules/minecraft.nix]]
#+begin_src nix :tangle ./modules/minecraft.nix
{ config, lib, pkgs, ... }:

{
  home.packages = with pkgs; [
    # minecraft
    # atlauncher
    prismlauncher
  ];
}
#+end_src

* System modules
** bluetooth.nix
- [[*home.nix modules][home.nix modules]]
#+begin_src nix :tangle ./system/bluetooth.nix
{ config, lib, pkgs, ... }:

{
  # Enable bluetooth
  hardware.bluetooth.enable = true; # enables support for Bluetooth
  hardware.bluetooth.powerOnBoot = true; # powers up the default Bluetooth controller on boot

  environment.systemPackages = with pkgs; [
    bluez-tools
  ];
}
#+end_src

** wayland.nix
#+begin_src nix :tangle ./system/wayland.nix
{ config, pkgs, ... }:

{
  imports = [ ./pipewire.nix
              ./dbus.nix
              ./gnome-keyring.nix
              ./fonts.nix
            ];

  environment.systemPackages = with pkgs;
    [ wayland waydroid
      # (sddm-chili-theme.override {
      #   themeConfig = {
      #     background = config.stylix.image;
      #     ScreenWidth = 1920;
      #     ScreenHeight = 1080;
      #     blur = true;
      #     recursiveBlurLoops = 3;
      #     recursiveBlurRadius = 5;
      #   };})
    ];

  # Configure xwayland
  services.xserver = {
    enable = true;
    xkb = {
      layout = "us";
      variant = "";
      options = "caps:escape";
    };
  };
}
#+end_src
** pipewire.nix
#+begin_src nix :tangle ./system/pipewire.nix
{ ... }:

{

  # services = {
  #   blueman.enable = true;
  #   # gnome.gnome-keyring.enable = true;
  #   pipewire = { # multimedia framework
  #     enable = true;
  #     alsa = {
  #       enable = true;
  #       support32Bit = true;
  #     };
  #     pulse.enable = true;
  #   };
  # };

  # services.pulseaudio.enable = false;
  # Pipewire
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # jack.enable = true;
  };
}
#+end_src
** dbus.nix
#+begin_src nix :tangle ./system/dbus.nix
{ pkgs, ... }:

{
  services.dbus = {
    enable = true;
    packages = [ pkgs.dconf ];
  };

  programs.dconf = {
    enable = true;
  };
}
#+end_src
** fonts.nix
[[*Fonts][Fonts]]
#+begin_src nix :tangle ./system/fonts.nix
{ config, pkgs, ... }:
{
  fonts.packages = with pkgs; [
    nerd-fonts.fira-code
    nerd-fonts.droid-sans-mono
    nerd-fonts.jetbrains-mono
  ];
}
#+end_src
** gnome-keyring.nix
#+begin_src nix :tangle ./system/gnome-keyring.nix
{ ... }:

{
  services.gnome = {
    gnome-keyring.enable = true;
  };
}
#+end_src
* Hyprland
** hyprland.nix
We want this to be imported within configuration.nix modules:
- [[*configuration.nix modules][configuration.nix nodules]]
#+begin_src nix :tangle ./system/hyprland.nix
{ config, lib, pkgs, ... }:

{
  # Import wayland config
  imports = [ ./wayland.nix
              ./pipewire.nix
              ./dbus.nix
              ./bluetooth.nix
            ];

  # Security
  security = {
    pam.services.login.enableGnomeKeyring = true;
  };

  services.gnome.gnome-keyring.enable = true;
  # services.xserver.displayManager.sddm.enable = true; # Replaced by below
  services.displayManager.sddm.enable = true; # This line enables sddm
  services.xserver.enable = true; # Might need this for Xwayland
  services.blueman.enable = true;


  programs.hyprland = {
      enable = true;
      xwayland.enable = true;
      withUWSM = true; # Enable UWSM (Universal Wayland Session Manager)
    };

  # services.xserver.excludePackages = [ pkgs.xterm ];

  # services.xserver = {
  #   enable = true;
  #   displayManager = {
  #     sddm = {
  #       enable = true;
  #       # theme = sddm-chili-theme.override {
  #       #   themeConfig = {
  #       #     background = config.stylix.image;
  #       #     ScreenWidth = 1920;
  #       #     ScreenHeight = 1080;
  #       #     blur = true;
  #       #     recursiveBlurLoops = 3;
  #       #     recursiveBlurRadius = 5;
  #       #   };
  #       # };
  #     };
  #   };
  #   desktopManager.hyprland.enable = true;
  #   windowManager.hyprland.enable = true;
  # };
}
#+end_src


** hyprland minimal
We want this to be enabled within the homemanager imports:
[[*home.nix modules][home.nix modules]]
#+begin_src nix :tangle ./modules/wm/hyprland-minimal.nix :noweb yes
{ pkgs, lib, inputs, ... }:

{
  imports = [
    ./alacritty.nix
    ./kitty.nix
  ];
  wayland.windowManager.hyprland = {
    enable = true;
    #   # package = pkgs-hyprland.hyprland-minimal;
    #   # plugins = [ ];
    #   # settings = { };
    extraConfig = ''
<<hyprlandExtraConfig>>
    '';
    #   xwayland.enable = true;
    #   # systemd.enable = true;
  };

#+end_src
** hyprland packages
:PROPERTIES:
:ID:       356dce67-52f8-4ef5-a728-578aa1077031
:END:
#+begin_src nix :tangle ./modules/wm/hyprland-minimal.nix :noweb yes
  home.packages = with pkgs; [
    alacritty # fancy terminal
    kitty # default terminal
    waybar # bar, switch to eww later
    dunst # notifications
    libnotify # dunst dependency
    swww # wallpaper manager

    nwg-launchers # app launcher
    rofi-wayland # application launcher
    nwg-displays # display manager
    playerctl # for audio controls

    hyprlock # lock manager
    brightnessctl # used for dimming brightness
    hyprsunset # bluelight filter
    hyprpaper # wallpaper
    # redshift # blue light filter
    # geoclue2 # red shift dependency
    vim  # basic text editor
    dropbox # syncing files
    blueman # bluetooth
    xfce.xfce4-taskmanager
    xfce.thunar

    # cli tools
    hyprpicker # color picker
    wl-clipboard # clipboard manager

    tesseract4 # ocr
    slurp # screenshot
    grim # used to grab images?
    wev # used to find keybindings
    (pkgs.writeScriptBin "screenshot-ocr" ''
      #!/bin/sh
      imgname="/tmp/screenshot-ocr-$(date +%Y%m%d%H%M%S).png"
      txtname="/tmp/screenshot-ocr-$(date +%Y%m%d%H%M%S)"
      txtfname=$txtname.txt
      grim -g "$(slurp)" $imgname;
      tesseract $imgname $txtname;
      wl-copy -n < $txtfname
    '')


  ] ++ [ inputs.raise.defaultPackage.x86_64-linux ];
  <<hyprland-home-files>>
  <<waybar>>
}

#+end_src
*** Hyprland config
:PROPERTIES:
:header-args:conf: :noweb-ref hyprlandExtraConfig
:END:
**** Hyprland packages

[[elisp:(save-excursion (evil-next-line) (org-transclusion-add))][transclude-packages]]
#+transclude: [[id:356dce67-52f8-4ef5-a728-578aa1077031][hyprland packages]]

**** Hyprland Packages

**** Information
#+begin_src conf
autogenerated = 0 # remove this line to remove the warning

# This is an example Hyprland config file.
# Refer to the wiki for more information.
# https://wiki.hyprland.org/Configuring/

# Please note not all available settings / options are set here.
# For a full list, see the wiki

# You can split this configuration into multiple files
# Create your files separately and then link them to this file like this:
# source = ~/.config/hypr/myColors.conf
#+end_src
**** Monitors
#+begin_src conf
# See https://wiki.hyprland.org/Configuring/Monitors/
# default onitor seeing
# monitor=,preferred,auto,auto
monitor = ,preferred,auto,1
# # thinkpad monitor
# monitor = desc: AU Optronics 0x573D,
# # dell monitor
# monitor = desc: Dell Inc. DELL P3421W,
#+end_src
**** My Programs

#+begin_src conf
# See https://wiki.hyprland.org/Configuring/Keywords/

# Set programs that you use
$terminal = kitty
$fileManager = thunar
$menu = wofi --show drun
#+end_src
**** Autostart
#+begin_src conf
# Autostart necessary processes (like notifications daemons, status bars, etc.)
# Or execute your favorite apps at launch like this:
exec-once = systemctl --user restart gvfs-daemon # needed for tramp emacs
exec-once = dropbox
# exec-once = blueman-applet # TODO Need to double check if this is needed

exec-once = hyprsunset
exec-once = hyprpaper
exec-once = hypridle
# exec-once = waybar

exec-once = sleep 1 && restart-emacs-daemon
# exec-once = $terminal
# exec-once = nm-applet &
# exec-once = waybar & hyprpaper & firefox
#+end_src
**** Environment variables

#+begin_src conf
# See https://wiki.hyprland.org/Configuring/Environment-variables/

env = XCURSOR_SIZE,24
env = HYPRCURSOR_SIZE,24
#+end_src
**** Permissions

#+begin_src conf
# See https://wiki.hyprland.org/Configuring/Permissions/
# Please note permission changes here require a Hyprland restart and are not applied on-the-fly
# for security reasons

# ecosystem {
#   enforce_permissions = 1
# }

# permission = /usr/(bin|local/bin)/grim, screencopy, allow
# permission = /usr/(lib|libexec|lib64)/xdg-desktop-portal-hyprland, screencopy, allow
# permission = /usr/(bin|local/bin)/hyprpm, plugin, allow
#+end_src
**** Look and Feel

#+begin_src conf
# Refer to https://wiki.hyprland.org/Configuring/Variables/

# https://wiki.hyprland.org/Configuring/Variables/#general
general {
    gaps_in = 5
    gaps_out = 20

    border_size = 2

    # https://wiki.hyprland.org/Configuring/Variables/#variable-types for info about colors
    col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
    col.inactive_border = rgba(595959aa)

    # Set to true enable resizing windows by clicking and dragging on borders and gaps
    resize_on_border = false

    # Please see https://wiki.hyprland.org/Configuring/Tearing/ before you turn this on
    allow_tearing = false

    layout = dwindle
}
#+end_src
***** Decoration

#+begin_src conf
# https://wiki.hyprland.org/Configuring/Variables/#decoration
decoration {
    rounding = 10
    rounding_power = 2

    # Change transparency of focused and unfocused windows
    active_opacity = 1.0
    inactive_opacity = 1.0

    shadow {
        enabled = true
        range = 4
        render_power = 3
        color = rgba(1a1a1aee)
    }

    # https://wiki.hyprland.org/Configuring/Variables/#blur
    blur {
        enabled = true
        size = 3
        passes = 1

        vibrancy = 0.1696
    }
}
#+end_src
***** Animation

#+begin_src conf
# https://wiki.hyprland.org/Configuring/Variables/#animations
animations {
    enabled = yes, please :)

    # Default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more

    bezier = easeOutQuint,0.23,1,0.32,1
    bezier = easeInOutCubic,0.65,0.05,0.36,1
    bezier = linear,0,0,1,1
    bezier = almostLinear,0.5,0.5,0.75,1.0
    bezier = quick,0.15,0,0.1,1

    animation = global, 1, 10, default
    animation = border, 1, 5.39, easeOutQuint
    animation = windows, 1, 4.79, easeOutQuint
    animation = windowsIn, 1, 4.1, easeOutQuint, popin 87%
    animation = windowsOut, 1, 1.49, linear, popin 87%
    animation = fadeIn, 1, 1.73, almostLinear
    animation = fadeOut, 1, 1.46, almostLinear
    animation = fade, 1, 3.03, quick
    animation = layers, 1, 3.81, easeOutQuint
    animation = layersIn, 1, 4, easeOutQuint, fade
    animation = layersOut, 1, 1.5, linear, fade
    animation = fadeLayersIn, 1, 1.79, almostLinear
    animation = fadeLayersOut, 1, 1.39, almostLinear
    animation = workspaces, 1, 1.94, almostLinear, fade
    animation = workspacesIn, 1, 1.21, almostLinear, fade
    animation = workspacesOut, 1, 1.94, almostLinear, fade
}

# Ref https://wiki.hyprland.org/Configuring/Workspace-Rules/
# "Smart gaps" / "No gaps when only"
# uncomment all if you wish to use that.
# workspace = w[tv1], gapsout:0, gapsin:0
# workspace = f[1], gapsout:0, gapsin:0
# windowrule = bordersize 0, floating:0, onworkspace:w[tv1]
# windowrule = rounding 0, floating:0, onworkspace:w[tv1]
# windowrule = bordersize 0, floating:0, onworkspace:f[1]
# windowrule = rounding 0, floating:0, onworkspace:f[1]
#+end_src
**** Dwindle

#+begin_src conf
# See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
dwindle {
    pseudotile = true # Master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
    preserve_split = true # You probably want this
}
#+end_src
**** Master layout

#+begin_src conf
# See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
master {
    new_status = master
}
#+end_src
**** Variables / Misc

#+begin_src conf
# https://wiki.hyprland.org/Configuring/Variables/#misc
misc {
    force_default_wallpaper = 0 # Set to 0 or 1 to disable the anime mascot wallpapers
    disable_hyprland_logo = true # If true disables the random hyprland logo / anime girl background. :(
}
#+end_src
**** Input

#+begin_src conf
# https://wiki.hyprland.org/Configuring/Variables/#input
input {
    kb_layout = us
    kb_variant =
    kb_model =
    kb_options =
    kb_rules =

    follow_mouse = 0
    kb_options = ctrl:nocaps

    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.

    touchpad {
        natural_scroll = false
    }
    repeat_delay = 185
    repeat_rate = 75
}
#+end_src
**** Gestures

#+begin_src conf
# https://wiki.hyprland.org/Configuring/Variables/#gestures
gestures {
    workspace_swipe = false
}
#+end_src
**** Per-device config

#+begin_src conf
# Example per-device config
# See https://wiki.hyprland.org/Configuring/Keywords/#per-device-input-configs for more
device {
    name = epic-mouse-v1
    sensitivity = -0.5
}
#+end_src
**** Keybindings
#+begin_src conf
# See https://wiki.hyprland.org/Configuring/Keywords/
$mainMod = SUPER # Sets "Super" key as main modifier
#+end_src
***** Temporary
#+begin_src conf
bindm = SUPER, mouse:274, togglefloating
bind = SUPER_L&ALT_L, mouse:272, exec, hyprctl keyword cursor:zoom_factor "$(hyprctl getoption cursor:zoom_factor | grep float | awk '{print $2 + 0.1}')"
bind = SUPER_L&ALT_L, mouse:273, exec, hyprctl keyword cursor:zoom_factor "$(hyprctl getoption cursor:zoom_factor | grep float | awk '{print $2 - 0.1}')"
bind = SUPER, F, fullscreen, 1
# bind = SUPERSHIFT, F, fullscreen, 0
bind = SUPER, B, togglefloating
bind=SUPER,Y,workspaceopt,allfloat
#+end_src
***** Launch Applications
#+begin_src conf
bind = ALT, W, fullscreen
bind = ,W&L, fullscreen
# Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
bind = SUPER, SPACE, exec, nwggrid
bind = SUPER, D, exec, nwggrid
# bind = SUPER, T, exec, $terminal

# brave
bind = SUPER, C, exec, raise --class "Brave-browser" --launch "brave"
bind = ,J&B, exec, raise --class "Brave-browser" --launch "brave"
# bind = SUPER_SHIFT, C, exec, brave
# bind = SUPER, C, exec, brave

bind = SUPER, T, exec, raise --class "Alacritty" --launch "alacritty"
bind = SUPER_SHIFT, T, exec, alacritty

bind = $mainMod, X, killactive,
bind = $mainMod, V, togglefloating,
bind = $mainMod, P, pseudo, # dwindle
# bind = $mainMod, J, togglesplit, # dwindle
#+end_src
***** Screenshots
#+begin_src conf
bind=SUPER,S,exec,grim -g "$(slurp)" - | wl-copy
# bind=,code:107,exec,grim -g "$(slurp)"
# bind=SHIFT,code:107,exec,grim -g "$(slurp -o)"
# bind=SUPER,code:107,exec,grim
# bind=CTRL,code:107,exec,grim -g "$(slurp)" - | wl-copy
# bind=SHIFTCTRL,code:107,exec,grim -g "$(slurp -o)" - | wl-copy
# bind=SUPERCTRL,code:107,exec,grim - | wl-copy
#+end_src
***** Emacs
#+begin_src conf
# emacs
bind = ALT, E, exec, raise --class "Emacs" --launch "emacsclient --create-frame"
bind = ,J&E, exec, raise --class "Emacs" --launch "emacsclient --create-frame"
bind = SUPER, E, exec, raise --class "Emacs" --launch "emacsclient --create-frame"
bind = SUPER_SHIFT, E, exec, emacsclient --create-frame
bind = SUPER, I, exec, emacsclient --eval "(emacs-everywhere)" # TODO
bind = SUPER, BackSpace, exec, /home/dimitril/.config/emacs/bin/org-capture
# bind = ALT, E, exec, emacsclient -c
# bind = SUPER, E, exec, emacsclient -c
# restart emacs daemon
bind = SUPER, 0, exec, restart-emacs-daemon
#+end_src
***** Scripts
#+begin_src conf
bind = SUPER_SHIFT, C, exec, wl-copy $(hyprpicker)
bind = SUPERALT, T, exec, screenshot-ocr
#+end_src
***** Moving windows
#+begin_src conf
# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# alt tab
bind=ALT,TAB,cyclenext
bind=ALT,TAB,bringactivetotop
bind=ALTSHIFT,TAB,cyclenext,prev
bind=ALTSHIFT,TAB,bringactivetotop

# Move focus with arrow keys
bind = SUPER, left, movefocus, l
bind = SUPER, right, movefocus, r
bind = SUPER, up, movefocus, u
bind = SUPER, down, movefocus, d

# Move focus with vim keybindings as well
bind=SUPER,H,movefocus,l
bind=SUPER,J,movefocus,d
bind=SUPER,K,movefocus,u
bind=SUPER,L,movefocus,r
bind=SUPER,H,alterzorder,top
bind=SUPER,L,alterzorder,top
bind=SUPER,K,alterzorder,top
bind=SUPER,J,alterzorder,top

# Move where windows are
bind=SUPERSHIFT,H,movewindow,l
bind=SUPERSHIFT,J,movewindow,d
bind=SUPERSHIFT,K,movewindow,u
bind=SUPERSHIFT,L,movewindow,r

# Move where windows are
bind=SUPER&ALT,H,movewindow,l
bind=SUPER&ALT,J,movewindow,d
bind=SUPER&ALT,K,movewindow,u
bind=SUPER&ALT,L,movewindow,r

# Kill window while on vim keybindings
bind=SUPER,ESCAPE,killactive,
#+end_src
***** Workspace commmands
#+begin_src conf

# Scroll through existing workspaces with mainMod + scroll
# bind = $mainMod, mouse_down, workspace, e+1
# bind = $mainMod, mouse_up, workspace, e-1

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
#+end_src
***** Keybindings 4

#+begin_src conf
# Example special workspace (scratchpad)
# bind = $mainMod, S, togglespecialworkspace, magic
# bind = $mainMod SHIFT, S, movetoworkspace, special:magic



# Laptop multimedia keys for volume and LCD brightness
bindel = ,XF86AudioRaiseVolume, exec, wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ 5%+
bindel = ,XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindel = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindel = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
bindel = ,XF86MonBrightnessUp, exec, brightnessctl -e4 -n2 set 5%+
bindel = ,XF86MonBrightnessDown, exec, brightnessctl -e4 -n2 set 5%-

# Requires playerctl
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous
#+end_src
**** Windows and workspaces

#+begin_src conf
# See https://wiki.hyprland.org/Configuring/Window-Rules/ for more
# See https://wiki.hyprland.org/Configuring/Workspace-Rules/ for workspace rules

# Example windowrule
# windowrule = float,class:^(kitty)$,title:^(kitty)$

# Have windows be floating by default
windowrulev2 = float, class:.*
# Have the following windows be tiled by default
windowrulev2 = tile, class:^(Emacs) # TODO
windowrulev2 = float, title:^(doom-capture) # TODO
windowrulev2 = tile, class:^(Brave-browser) # TODO
windowrulev2 = tile, class:^(Alacritty)
windowrulev2 = tile, class:^(thunar)
windowrulev2 = float,class:^(steam)

# Ignore maximize requests from apps. You'll probably like this.
windowrule = suppressevent maximize, class:.*

# Fix some dragging issues with XWayland
windowrule = nofocus,class:^$,title:^$,xwayland:1,floating:1,fullscreen:0,pinned:0
#+end_src
** hyprland home files
#+begin_src nix :noweb-ref hyprland-home-files :noweb yes

home.file.".config/hypr/hyprpaper.conf".text = ''
<<hyprpaper>>
'';

home.file.".config/hypr/hyprlock.conf".text = ''
<<hyprlock>>
'';

home.file.".config/hypr/hypridle.conf".text = ''
<<hypridle>>
'';
#+end_src
*** hyprpaper
#+begin_src conf :noweb-ref hyprpaper
preload = /home/dimitril/Dropbox/images/Truchas_LopezRanch_MW.jpg
wallpaper = monitor, /home/dimitril/Dropbox/images/Truchas_LopezRanch_MW.jpg
#+end_src
*** hyprlock
#+begin_src conf :noweb-ref hyprlock
background {
monitor =
path = screenshot
blur_passes = 4
blur_size = 5
noise = 0.0117
contrast = 0.8916
brightness = 0.8172
vibrancy = 0.1696
vibrancy_darkness = 0.0
}
image {
monitor =
path = /home/dimitril/Dropbox/images/Truchas_LopezRanch_MW.jpg
size = 150 # lesser side if not 1:1 ratio
rounding = -1 # negative values mean circle
border_size = 0
rotate = 0 # degrees, counter-clockwise

position = 0, 200
halign = center
valign = center
}

input-field {
monitor =
size = 200, 50
outline_thickness = 3
dots_size = 0.33 # Scale of input-field height, 0.2 - 0.8
dots_spacing = 0.15 # Scale of dots' absolute size, 0.0 - 1.0
dots_center = false
dots_rounding = -1 # -1 default circle, -2 follow input-field rounding
fade_on_empty = true
fade_timeout = 1000 # Milliseconds before fade_on_empty is triggered.
placeholder_text = <i>Input Password...</i> # Text rendered in the input box when it's empty.
hide_input = false
rounding = -1 # -1 means complete rounding (circle/oval)
fail_text = <i>$FAIL <b>($ATTEMPTS)</b></i> # can be set to empty
fail_transition = 300 # transition time in ms between normal outer_color and fail_color
capslock_color = -1
numlock_color = -1
bothlock_color = -1 # when both locks are active. -1 means don't change outer color (same for above)
invert_numlock = false # change color if numlock is off
swap_font_color = false # see below

position = 0, -20
halign = center
valign = center
}

label {
monitor =
text = Hello, dimitril
rotate = 0 # degrees, counter-clockwise

position = 0, 160
halign = center
valign = center
}

label {
monitor =
text = $TIME
rotate = 0 # degrees, counter-clockwise

position = 0, 80
halign = center
valign = center
}


#+end_src
*** hypridle
#+begin_src conf :noweb-ref hypridle
general {
  lock_cmd = pidof hyprlock || hyprlock
  before_sleep_cmd = loginctl lock-session    # lock before suspend.
  after_sleep_cmd = hyprctl dispatch dpms on  # to avoid having to press a key twice to turn on the display.
  ignore_dbus_inhibit = false
}

# Reduce brightness
listener {
    timeout = 150                                # 2.5min.
    on-timeout = brightnessctl -s set 5          # set monitor backlight to minimum, avoid 0 on OLED monitor.
    on-resume = brightnessctl -r                 # monitor backlight restore.
}

# Turn off keyboard backlight
listener {
    timeout = 150                                              # 2.5min.
    on-timeout = brightnessctl -sd tpacpi::kbd_backlight set 0 # turn off keyboard backlight.
    on-resume = brightnessctl -rd tpacpi::kbd_backlight        # turn on keyboard backlight.
}

# FIXME memory leak fries computer inbetween dpms off and suspend
#listener {
#  timeout = 150 # in seconds
#  on-timeout = hyprctl dispatch dpms off
#  on-resume = hyprctl dispatch dpms on
#}
listener {
  timeout = 165 # in seconds
  on-timeout = loginctl lock-session
}
listener {
  timeout = 180 # in seconds
  #timeout = 5400 # in seconds
  on-timeout = systemctl suspend
  on-resume = hyprctl dispatch dpms on
}

listener {
    timeout = 300                                 # 5min
    on-timeout = loginctl lock-session            # lock screen when timeout has passed
}

listener {
    timeout = 330                                                     # 5.5min
    on-timeout = hyprctl dispatch dpms off                            # screen off when timeout has passed
    on-resume = hyprctl dispatch dpms on && brightnessctl -r          # screen on when activity is detected after timeout has fired.
}

listener {
    timeout = 400                                # 30min
    on-timeout = systemctl suspend                # suspend pc
}
#+end_src
*** waybar
#+begin_src nix :noweb-ref waybar :noweb yes

#+end_src
#+begin_src nix :tangle no
programs.waybar = {
  enable = true;
  package = pkgs.waybar.overrideAttrs (oldAttrs: {
    postPatch = ''
        # use hyprctl to switch workspaces
        sed -i 's/zext_workspace_handle_v1_activate(workspace_handle_);/const std::string command = "hyprctl dispatch focusworkspaceoncurrentmonitor " + std::to_string(id());\n\tsystem(command.c_str());/g' src/modules/wlr/workspace_manager.cpp
        sed -i 's/gIPC->getSocket1Reply("dispatch workspace " + std::to_string(id()));/gIPC->getSocket1Reply("dispatch focusworkspaceoncurrentmonitor " + std::to_string(id()));/g' src/modules/hyprland/workspaces.cpp
      '';
    patches = [./patches/waybarpaupdate.patch ./patches/waybarbatupdate.patch];
  });
  settings = {
    mainBar = {
      layer = "top";
      position = "top";
      height = 35;
      margin = "7 7 3 7";
      spacing = 2;

      modules-left = [ "group/power" "group/battery" "group/backlight" "group/cpu" "group/memory" "group/pulseaudio" "keyboard-state" ];
      modules-center = [ "custom/hyprprofile" "hyprland/workspaces" ];
      modules-right = [ "group/time" "idle_inhibitor" "tray" ];

      "custom/os" = {
        "format" = " {} ";
        "exec" = ''echo "" '';
        "interval" = "once";
        "on-click" = "nwggrid-wrapper";
        "tooltip" = false;
      };
      "group/power" = {
        "orientation" = "horizontal";
        "drawer" = {
          "transition-duration" = 500;
          "children-class" = "not-power";
          "transition-left-to-right" = true;
        };
        "modules" = [
          "custom/os"
          "custom/hyprprofileicon"
          "custom/lock"
          "custom/quit"
          "custom/power"
          "custom/reboot"
        ];
      };
      "custom/quit" = {
        "format" = "󰍃";
        "tooltip" = false;
        "on-click" = "hyprctl dispatch exit";
      };
      "custom/lock" = {
        "format" = "󰍁";
        "tooltip" = false;
        "on-click" = "hyprlock";
      };
      "custom/reboot" = {
        "format" = "󰜉";
        "tooltip" = false;
        "on-click" = "reboot";
      };
      "custom/power" = {
        "format" = "󰐥";
        "tooltip" = false;
        "on-click" = "shutdown now";
      };
      "custom/hyprprofileicon" = {
        "format" = "󱙋";
        "on-click" = "hyprprofile-dmenu";
        "tooltip" = false;
      };
      "custom/hyprprofile" = {
        "format" = " {}";
        "exec" = ''cat ~/.hyprprofile'';
        "interval" = 3;
        "on-click" = "hyprprofile-dmenu";
      };
      "keyboard-state" = {
        "numlock" = true;
        "format" = "{icon}";
        "format-icons" = {
          "locked" = "󰎠 ";
          "unlocked" = "󱧓 ";
        };
      };
      "hyprland/workspaces" = {
        "format" = "{icon}";
        "format-icons" = {
          "1" = "󱚌";
          "2" = "󰖟";
          "3" = "";
          "4" = "󰎄";
          "5" = "󰋩";
          "6" = "";
          "7" = "󰄖";
          "8" = "󰑴";
          "9" = "󱎓";
          "scratch_term" = "_";
          "scratch_ranger" = "_󰴉";
          "scratch_music" = "_";
          "scratch_btm" = "_";
          "scratch_pavucontrol" = "_󰍰";
        };
        "on-click" = "activate";
        "on-scroll-up" = "hyprnome";
        "on-scroll-down" = "hyprnome --previous";
        "all-outputs" = false;
        "active-only" = false;
        "ignore-workspaces" = ["scratch" "-"];
        "show-special" = false;
      };

      "idle_inhibitor" = {
        format = "{icon}";
        format-icons = {
          activated = "󰅶";
          deactivated = "󰾪";
        };
      };
      tray = {
        #"icon-size" = 21;
        "spacing" = 10;
      };
      "clock#time" = {
        "interval" = 1;
        "format" = "{:%I:%M:%S %p}";
        "timezone" = "America/Chicago";
        "tooltip-format" = ''
            <big>{:%Y %B}</big>
            <tt><small>{calendar}</small></tt>'';
      };
      "clock#date" = {
        "interval" = 1;
        "format" = "{:%a %Y-%m-%d}";
        "timezone" = "America/Chicago";
        "tooltip-format" = ''
            <big>{:%Y %B}</big>
            <tt><small>{calendar}</small></tt>'';
      };
      "group/time" = {
        "orientation" = "horizontal";
        "drawer" = {
          "transition-duration" = 500;
          "transition-left-to-right" = false;
        };
        "modules" = [ "clock#time" "clock#date" ];
      };

      cpu = { "format" = "󰍛"; };
      "cpu#text" = { "format" = "{usage}%"; };
      "group/cpu" = {
        "orientation" = "horizontal";
        "drawer" = {
          "transition-duration" = 500;
          "transition-left-to-right" = true;
        };
        "modules" = [ "cpu" "cpu#text" ];
      };

      memory = { "format" = ""; };
      "memory#text" = { "format" = "{}%"; };
      "group/memory" = {
        "orientation" = "horizontal";
        "drawer" = {
          "transition-duration" = 500;
          "transition-left-to-right" = true;
        };
        "modules" = [ "memory" "memory#text" ];
      };

      backlight = {
        "format" = "{icon}";
        "format-icons" = [ "" "" "" "" "" "" "" "" "" ];
      };
      "backlight#text" = { "format" = "{percent}%"; };
      "group/backlight" = {
        "orientation" = "horizontal";
        "drawer" = {
          "transition-duration" = 500;
          "transition-left-to-right" = true;
        };
        "modules" = [ "backlight" "backlight#text" ];
      };

      battery = {
        "states" = {
          "good" = 75;
          "warning" = 30;
          "critical" = 15;
        };
        "fullat" = 80;
        "format" = "{icon}";
        "format-charging" = "󰂄";
        "format-plugged" = "󰂄";
        "format-full" = "󰁹";
        "format-icons" = [ "󰁺" "󰁻" "󰁼" "󰁽" "󰁾" "󰁿" "󰂀" "󰂁" "󰂂" "󰁹" ];
        "interval" = 10;
      };
      "battery#text" = {
        "states" = {
          "good" = 75;
          "warning" = 30;
          "critical" = 15;
        };
        "fullat" = 80;
        "format" = "{capacity}%";
      };
      "group/battery" = {
        "orientation" = "horizontal";
        "drawer" = {
          "transition-duration" = 500;
          "transition-left-to-right" = true;
        };
        "modules" = [ "battery" "battery#text" ];
      };
      pulseaudio = {
        "scroll-step" = 1;
        "format" = "{icon}";
        "format-bluetooth" = "{icon}";
        "format-bluetooth-muted" = "󰸈";
        "format-muted" = "󰸈";
        "format-source" = "";
        "format-source-muted" = "";
        "format-icons" = {
          "headphone" = "";
          "hands-free" = "";
          "headset" = "";
          "phone" = "";
          "portable" = "";
          "car" = "";
          "default" = [ "" "" "" ];
        };
        "on-click" = "hyprctl dispatch togglespecialworkspace scratch_pavucontrol; if hyprctl clients | grep pavucontrol; then echo 'scratch_ranger respawn not needed'; else pavucontrol; fi";
      };
      "pulseaudio#text" = {
        "scroll-step" = 1;
        "format" = "{volume}%";
        "format-bluetooth" = "{volume}%";
        "format-bluetooth-muted" = "";
        "format-muted" = "";
        "format-source" = "{volume}%";
        "format-source-muted" = "";
        "on-click" = "hyprctl dispatch togglespecialworkspace scratch_pavucontrol; if hyprctl clients | grep pavucontrol; then echo 'scratch_ranger respawn not needed'; else pavucontrol; fi";
      };
      "group/pulseaudio" = {
        "orientation" = "horizontal";
        "drawer" = {
          "transition-duration" = 500;
          "transition-left-to-right" = true;
        };
        "modules" = [ "pulseaudio" "pulseaudio#text" ];
      };
    };
  };
  style = ''

      window > box {
          border-radius: 8px;
          opacity: 0.94;
      }

      window#waybar.hidden {
          opacity: 0.2;
      }

      button {
          border: none;
      }

      /* https://github.com/Alexays/Waybar/wiki/FAQ#the-workspace-buttons-have-a-strange-hover-effect */
      button:hover {
          background: inherit;
      }

      #battery,
      #cpu,
      #memory,
      #disk,
      #temperature,
      #backlight,
      #network,
      #pulseaudio,
      #wireplumber,
      #custom-media,
      #tray,
      #mode,
      #idle_inhibitor,
      #scratchpad,
      #custom-hyprprofileicon,
      #custom-quit,
      #custom-lock,
      #custom-reboot,
      #custom-power,

      #custom-hyprprofileicon,
      #custom-quit,
      #custom-lock,
      #custom-reboot,
      #custom-power,

      #custom-hyprprofileicon:hover,
      #custom-quit:hover,
      #custom-lock:hover,
      #custom-reboot:hover,
      #custom-power:hover,

      #clock, #tray, #idle_inhibitor {
          padding: 0 5px;
      }

      #window,
      #workspaces {
          margin: 0 6px;
      }

      /* If workspaces is the leftmost module, omit left margin */
      .modules-left > widget:first-child > #workspaces {
          margin-left: 0;
      }

      /* If workspaces is the rightmost module, omit right margin */
      .modules-right > widget:last-child > #workspaces {
          margin-right: 0;
      }

      #tray > .passive {
          -gtk-icon-effect: dim;
      }

      #tray > .needs-attention {
          -gtk-icon-effect: highlight;
      }
      '';
};
#+end_src



** Alacritty
#+begin_src nix :tangle ./modules/wm/alacritty.nix
{ pkgs, lib, ... }:

{
  home.packages = with pkgs; [
    alacritty
  ];
  programs.alacritty.enable = true;
  programs.alacritty.settings = {
    window.opacity = lib.mkForce 0.85;
  };

}

#+end_src
** kitty
#+begin_src nix :tangle ./modules/wm/kitty.nix
{ pkgs, lib, ... }:

{
  home.packages = with pkgs; [
    kitty
  ];
  programs.kitty.enable = true;
  programs.kitty.settings = {
    background_opacity = lib.mkForce "0.85";
    modify_font = "cell_width 90%";
  };
}
#+end_src
