#+title: 󱄅 NixOS Config 󱄅
# #+PROPERTY: header-args:nix :tangle configuration.nix :exports code
#+PROPERTY: header-args:nix :tangle configuration.nix
- ~/.dotfiles/flake.nix
- ~/.dotfiles/configuration.nix
- [[elisp:(org-babel-tangle)][Tangle file]]
- [[*Packages to clean up][Packages to clean up]]

I had tried to use this so that I could tangle it easily. At the moment, it is an absolute mess. Don't tangle this file.

* Notes
** Flakes
- Following this [[https://www.youtube.com/watch?v=ACybVzRvDhs&list=PL_WcXIXdDWWpuypAEKzZF2b5PijTluxRG&index=3][youtube video.]]
- [[https://librephoenix.com/2023-10-21-intro-flake-config-setup-for-new-nixos-users][Blog Post]]

*** Switching flakes
To switch to the flake we want to run
#+begin_src bash
sudo nixos-rebuild switch --flake .#dimitril
#+end_src

If I fix it so that I wouldn't need the ".#dimitril".
*** Securing my config files
I made sure that only the root user could modify my config files
#+begin_src bash
sudo chown root configuration.nix
sudo chown root hardware-configuration.nix
#+end_src

*** Updating the flake and the system
To update the flake I can use.
#+begin_src bash
nix flake update
#+end_src

This only updates the flake not the whole system. Afterwards I would need to run:

#+begin_src bash
sudo nixos-rebuild switch --flake .#dimitril
#+end_src

#+RESULTS:
** Home manager
Following this [[https://librephoenix.com/2023-11-02-how-to-manage-your-dotfiles-the-nix-way-with-home-manager][this blog post]].

He recommends doing it at the user level rather than the system level. That way I can update thigns without having root access.

*** Installing from the stable channel.
We have to bootstrap it before we can use it properly.

#+begin_src bash
nix-channel --add https://github.com/nix-community/home-manager/archive/release-25.05.tar.gz home-manager
nix-channel --update
#+end_src

#+RESULTS:

We then open up a nix shell and install it
#+begin_src bash
nix-shell '<home-manager>' -A install
#+end_src

This has created the file at =~/.config/home-manager/home.nix=. I will then move it to where my flake is at

#+begin_src bash
mv ~/.config/home-manager/home.nix ~/.dotfiles/
#+end_src

#+RESULTS:
Which will place it at: =~/.dotfiles/home.nix=

I then tweaked the inputs and outputs within =~/.dotfiles/flake.nix=.

#+begin_src nix
home-manager.url = "github:nix-community/home-manager/archive/release-25.05";
home-manager.inputs.nixpkgs.follows = "nixpkgs"; # to ensure that it has access to nixpkgs
#+end_src

*** Building from home manager
Instead of the full:
#+begin_src bash
sudo nixos-rebuild switch --flake .
#+end_src

We can do the simpler
#+begin_src bash
home-manager switch --flake .
#+end_src

However we still update the system by calling
#+begin_src bash
nix flake update
#+end_src
*** Options for home-manager
When looking at the [[https://mynixos.com/][mynixos.com]] tool, anything designated with the home-manager/option is an option we can place within =~/.dotfiles/home.nix=.

*** Switching over to zshrc
=~/.dotfiles/home.nix=
* Installing Python
I was following this forum post:

https://discourse.nixos.org/t/how-install-python-packages-globally-with-home-manager/37025

Which said to simply use homemanager. Thus I installed [[*Home manager][Home manager]].


* Inbox
* System Packages
** List current system packages
#+BEGIN_SRC nix
  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
#+END_SRC

** Doom Emacs
#+BEGIN_SRC nix
  vim # in case emacs-evil fails

  git
  git-credential-manager # not a requirement but if you're gonna have git...
  emacs    # Emacs 27.2
  ripgrep
  coreutils # basic GNU utilities
  fd
  clang
#+END_SRC

*** Package dependencies
#+BEGIN_SRC nix
  texliveFull # for latex
  graphviz    # for org-roam
  nodejs      # for copilot.el
#+END_SRC

** Bluetooth
#+BEGIN_SRC nix
  blueman
#+END_SRC

** Bluelight filter
#+BEGIN_SRC nix
  redshift
  geoclue2
#+END_SRC


** Programming
*** Make tools
#+BEGIN_SRC nix
  cmake
  gnumake
  libtool
#+END_SRC

*** Python
#+BEGIN_SRC nix
  python312
  jupyter
  python312Packages.numpy
  python312Packages.sympy
#+END_SRC
** Browsers
#+BEGIN_SRC nix
  brave
#+END_SRC
** File Management
#+BEGIN_SRC nix
  dropbox
#+END_SRC


** Scripting Tools
- [[~/bin/]]
#+BEGIN_SRC nix
  jumpapp   # jump to dat thing
  libnotify # sending notifications
  wmctrl    # window management
#+END_SRC
** Packages to clean up
*** bluez
#+begin_src nix
  bluez
#+end_src
*** jupyter
#+begin_src nix
  jupyter
#+end_src
** Ending script
#+BEGIN_SRC nix
  ];
#+END_SRC


* Defaults
** Imports
#+BEGIN_SRC nix
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];
#+END_SRC

** Bootloader
#+BEGIN_SRC nix
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
#+END_SRC

** Networking
#+BEGIN_SRC nix
  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;
#+END_SRC

** Timezone
#+BEGIN_SRC nix
  time.timeZone = "America/New_York";
#+END_SRC

** Internationalization
#+BEGIN_SRC nix
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };
#+END_SRC

** X11
#+BEGIN_SRC nix
  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the XFCE Desktop Environment.
  services.xserver.displayManager.lightdm.enable = true;
  services.xserver.desktopManager.xfce.enable = true;

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };
#+END_SRC

** Printing
#+BEGIN_SRC nix
  # Enable CUPS to print documents.
  services.printing.enable = true;
#+END_SRC

** Sound
#+BEGIN_SRC nix
  # Enable sound with pipewire.
  services.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };
#+END_SRC

** Touchpad
#+BEGIN_SRC nix
  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;
#+END_SRC

** User Account
#+BEGIN_SRC nix
  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.dimitril = {
    isNormalUser = true;
    description = "Dimitri Lopez";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [
    #  thunderbird
    ];
  };
#+END_SRC

* Firefox
#+BEGIN_SRC nix
  # Install firefox.
  programs.firefox.enable = true;
#+END_SRC

** Unfree Packages
#+BEGIN_SRC nix
  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;
#+END_SRC

* Services
#+BEGIN_SRC nix
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;
#+END_SRC

* State Version
#+BEGIN_SRC nix
  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "25.05"; # Did you read the comment?
#+END_SRC

* Final Configuration
#+BEGIN_SRC nix :noweb yes :exports results :tangle configuration.nix
{ config, pkgs, ... }:
{
<<Introduction>>
<<Imports>>
<<Bootloader>>
<<Networking>>
<<Timezone>>
<<Internationalization>>
<<X11>>
<<Printing>>
<<Sound>>
<<Touchpad>>
<<User Account>>
<<Firefox>>
<<Unfree Packages>>
<<System Packages>>
<<Services>>
<<State Version>>
}
#+END_SRC
